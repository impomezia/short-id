  'use strict';

var alphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
var base     = alphabet.length;

// CRC-8 in table form
//
// Copyright (c) 1989 AnDan Software. You may use this program, or
// code or tables extracted from it, as long as this notice is not
// removed or changed.
var CRC8_TAB = [
    // C/C++ language:
    //
    // unsigned char CRC8_TAB[] = {...};
    0x00,0x1B,0x36,0x2D,0x6C,0x77,0x5A,0x41,0xD8,0xC3,0xEE,0xF5,0xB4,0xAF,0x82,0x99,0xD3,0xC8,0xE5,
    0xFE,0xBF,0xA4,0x89,0x92,0x0B,0x10,0x3D,0x26,0x67,0x7C,0x51,0x4A,0xC5,0xDE,0xF3,0xE8,0xA9,0xB2,
    0x9F,0x84,0x1D,0x06,0x2B,0x30,0x71,0x6A,0x47,0x5C,0x16,0x0D,0x20,0x3B,0x7A,0x61,0x4C,0x57,0xCE,
    0xD5,0xF8,0xE3,0xA2,0xB9,0x94,0x8F,0xE9,0xF2,0xDF,0xC4,0x85,0x9E,0xB3,0xA8,0x31,0x2A,0x07,0x1C,
    0x5D,0x46,0x6B,0x70,0x3A,0x21,0x0C,0x17,0x56,0x4D,0x60,0x7B,0xE2,0xF9,0xD4,0xCF,0x8E,0x95,0xB8,
    0xA3,0x2C,0x37,0x1A,0x01,0x40,0x5B,0x76,0x6D,0xF4,0xEF,0xC2,0xD9,0x98,0x83,0xAE,0xB5,0xFF,0xE4,
    0xC9,0xD2,0x93,0x88,0xA5,0xBE,0x27,0x3C,0x11,0x0A,0x4B,0x50,0x7D,0x66,0xB1,0xAA,0x87,0x9C,0xDD,
    0xC6,0xEB,0xF0,0x69,0x72,0x5F,0x44,0x05,0x1E,0x33,0x28,0x62,0x79,0x54,0x4F,0x0E,0x15,0x38,0x23,
    0xBA,0xA1,0x8C,0x97,0xD6,0xCD,0xE0,0xFB,0x74,0x6F,0x42,0x59,0x18,0x03,0x2E,0x35,0xAC,0xB7,0x9A,
    0x81,0xC0,0xDB,0xF6,0xED,0xA7,0xBC,0x91,0x8A,0xCB,0xD0,0xFD,0xE6,0x7F,0x64,0x49,0x52,0x13,0x08,
    0x25,0x3E,0x58,0x43,0x6E,0x75,0x34,0x2F,0x02,0x19,0x80,0x9B,0xB6,0xAD,0xEC,0xF7,0xDA,0xC1,0x8B,
    0x90,0xBD,0xA6,0xE7,0xFC,0xD1,0xCA,0x53,0x48,0x65,0x7E,0x3F,0x24,0x09,0x12,0x9D,0x86,0xAB,0xB0,
    0xF1,0xEA,0xC7,0xDC,0x45,0x5E,0x73,0x68,0x29,0x32,0x1F,0x04,0x4E,0x55,0x78,0x63,0x22,0x39,0x14,
    0x0F,0x96,0x8D,0xA0,0xBB,0xFA,0xE1,0xCC,0xD7
];


/**
 * Internal CRC8 implementation, based on https://github.com/alexgorbatchev/node-crc.
 *
 * @param str
 * @returns {number}
 */
function crc8(str) {
  var len = str.length;
  var crc = 0;

  for (var i = 0; i < len; i++) {
    crc = CRC8_TAB[(crc ^ str.charCodeAt(i)) & 0xFF];
  }

  return crc;
}


/**
 * Internal base58 encode.
 *
 * @param num
 * @returns {string}
 */
function encode(num) {
  var mod;
  var str = '';

  if (typeof num !== 'number') {
    num = parseInt(num);
  }

  while (num >= base) {
    mod = num % base;
    str = alphabet[mod] + str;
    num = (num - mod) / base;
  }

  return alphabet[num] + str;
}


/**
 * Internal base58 decode.
 *
 * @param str
 * @returns {number}
 */
function decode(str) {
  var index;
  var num = 0;
  var ref = str.split('').reverse();

  for (var i = 0; i < ref.length; ++i) {
    if ((index = alphabet.indexOf(ref[i])) === -1) {
      throw new Error('Value passed is not a valid Base58 string.');
    }

    num += index * Math.pow(base, i);
  }

  return num;
}


/**
 * Generate random id with specified size.
 *
 * @param size
 * @returns {string}
 */
function generate(size) {
  size = size || 7;
  if (typeof size !== 'number' || size < 3)
    size = 3;

  var text = '';

  for (var i = 0; i < size - 2; i++ ) {
    text += alphabet.charAt(Math.floor(Math.random() * base));
  }

  return text + encode(crc8(text) + base);
}


/**
 * Check id valid or not.
 *
 * @param id
 * @returns {boolean}
 */
function isValid(id) {
  if (typeof id !== 'string' || id.length < 3) {
    return false;
  }

  var crc;
  try {
    crc = decode(id.substr(id.length - 2)) - base;
  }
  catch (e) {
    return false;
  }

  return crc8(id.substr(0, id.length - 2)) === crc;
}

exports.generate = generate;
exports.isValid  = isValid;